
import pandas as pd
import numpy as np
from scipy.stats import gamma
from scipy.stats import halfnorm
from sklearn.neighbors import KernelDensity

data = {
    "mineralization": [2223, 2377, 5898, 3072, 7798, 4507, 5701, 11618, 12814, 2169, 8937, 3047, 2596, 2665, 309, 605, 618, 2651, 3869, 3925, 22620, 25372, 1249, 2433, 2251, 616, 1845, 723, 2389, 1202, 2734, 1129, 3206, 895, 2391, 610, 2568, 5136, 1694, 2028, 2539, 1873, 2505, 2242, 2901, 1152, 1240, 6613, 1181, 3281, 3217, 533, 4064, 21878, 2262, 6907, 1675, 3041, 2601, 5460, 5136, 16111, 22366, 13098, 17447, 19724, 21442, 24607, 504, 317, 2705, 1353, 378, 268, 2353],
    "SO4(-2)": [1225, 1285, 0.23, 0.1, 0.54, 10.64, 10.34, 6.17, 5.7, 25.6, 6.83, 29.2, 20.5, 12.33, 46.05, 48.5, 42.4, 1.2, 4.34, 3.79, 33.63, 49.2, 19.5, 21.3, 6.3, 33, 32, 33, 13.8, 30.5, 55, 20.5, 12.3, 23.7, 20.2, 38, 17, 19.25, 0.4, 0.52, 3.25, 19.9, 1.84, 5.07, 0.1, 47.1, 67.9, 4.57, 29.66, 0.5, 0.5, 17.9, 3.33, 4.61, 21.1, 9.11, 23.7, 2.05, 2.6, 12.7, 25.4, 6.51, 5.56, 6.54, 3.93, 3.1, 17.11, 3.27, 56.64, 69.85, 21.09, 696, 16.9, 5.6, 655.3],

    "Cl(-)": [2.5, 24.8, 853, 849, 3111, 1933, 1853, 4712, 2575, 194, 2187, 258, 207, 2, 2.7, 20, 16.7, 1.7, 1.9, 7.1, 628, 968, 5.5, 11.9, 8.4, 25, 13.3, 12.6, 9.1, 7.7, 13.9, 3.7, 7.3, 8.6, 9.5, 12.6, 8.7, 42.6, 2.1, 2.9, 1.2, 14.6, 1.6, 7.2, 11, 14.2, 12.9, 26.1, 9.2, 8.8, 4.7, 46.3, 552, 543, 295, 1380, 190, 360, 243, 1260, 1103, 2986, 5005, 6551, 9697, 10497, 11380, 13463, 41.7, 63.4, 1495, 43.7, 45.9, 1.6, 492.4],

    "HCO3(-)": [352, 380, 3152, 1164, 1686, 839, 1835, 2550, 60.8, 1288, 3356, 1825, 1597, 1962, 46.05, 365, 392, 1943, 2881, 2988, 15921, 17141, 918, 1785, 1662, 399, 1385, 498, 1799, 873, 1974, 828, 0.5, 639, 1758, 401, 1912, 3791, 1253, 1511, 1885, 1399, 1874, 1655, 2162, 798, 853, 4989, 848, 2395, 2349, 320, 2246, 9157, 1244, 3285, 962, 1784, 1595, 2282, 2250, 7713, 9796, 1284, 753, 1323, 1361, 1312, 264, 75, 178, 198, 218, 193, 385],
    "NA(+)": [62.3, 41.35, 1727, 872, 2496, 1585, 1816, 3874, 3999, 417.4, 2333, 516, 489, 70.51, 5.37, 10.53, 10.74, 11.48, 30.4, 304.2, 5074, 6311, 14, 88.8, 47.3, 18.4, 54.5, 16.2, 90, 17.1, 6.1, 49.8, 155, 49.2, 317.8, 40.1, 28, 635, 71.74, 54.2, 133.6, 140, 44.68, 34.48, 133.8, 63.96, 55.64, 760.4, 48.28, 488.9, 464.1, 70.4, 938.5, 6152, 445.8, 1692, 266.4, 362.6, 247.7, 1425, 1282, 4355, 6331, 4778, 6672, 7404, 7877, 9006, 38.59, 77.63, 880.7, 115.9, 29.8, 10.3, 421],
    "Ca(2+)": [430.4, 498.8, 8.94, 70.5, 141.3, 36.1, 46.3, 79.9, 31.9, 111.4, 250, 241, 419, 450.2, 41.29, 108.5, 112.3, 560.7, 728.8, 235.2, 180.1, 174.1, 222, 408, 434, 101.5, 158, 118.8, 331.7, 192.6, 557, 164, 306, 113.6, 152, 54.4, 445, 310, 253.8, 313.5, 301, 177, 445.8, 419.8, 400.8, 139.4, 160.5, 287.9, 160.2, 217.8, 222.3, 57.2, 128, 92.65, 131.8, 179.4, 134.5, 351.4, 355.3, 138.1, 175, 130.8, 93.74, 46.48, 31.71, 49.17, 78.5, 70.65, 70.29, 10.08, 63.47, 215.3, 38.5, 38.2, 224],
    "MG(2+)": [98.4, 92.45, 4.06, 8.66, 21.6, 6.8, 7.4, 20.2, 28, 21.4, 25.9, 46.5, 31.5, 86.8, 13.22, 18.3, 18.43, 41.75, 117.5, 294.5, 473.3, 304.4, 38.6, 71.2, 45.3, 28.6, 173.7, 33.1, 104, 49.1, 66.5, 33.47, 196.4, 37.9, 69.1, 35.7, 116, 275, 63.18, 84.12, 132.9, 87.3, 75.26, 64.95, 115.2, 52.38, 54.45, 443.1, 49.32, 94.44, 102.7, 9.5, 34.81, 223.3, 27.39, 71.64, 24.37, 59.82, 55.88, 25.73, 29.56, 215.1, 380.3, 23.26, 27, 33.63, 40.97, 38.57, 14.92, 5.18, 20.74, 38.2, 22.4, 12.3, 45.4],
    'K(+)': [10.98, 9.8, 18.02, 15.47, 48.53, 13.1, 18.6, 32.6, 22.9, 13.8, 104, 17.4, 14.9, 12.8, 1.28, 1.51, 1.29, 2.72, 4.22, 10.8, 233.2, 337.2, 3, 8, 4.23, 1.5, 7.9, 3.36, 9.8, 2.9, 2.4, 8.23, 18.4, 2.5, 20.4, 3.5, 2.8, 24.6, 5.29, 6.22, 6.73, 3.81, 10.07, 8.63, 10.77, 13.15, 10.92, 47.15, 7.22, 16.66, 14.51, 0.91, 31.46, 110, 16.91, 50.1, 11.47, 12.78, 11.54, 89.25, 79.24, 187, 23.95, 52.31, 25.88, 27.71, 99.72, 61.68, 2.28, 1.44, 9.25, 16.1, 4.7, 1.7, 53.7],
    'Ba(2+)': [0.022, 0.025, 2.53, 3.348, 16.83, 2.87, 4.085, 16.8, 5.4, 0.38, 3.2, 0.58, 0.3, 0.591, 0.145, 0.177, 0.196, 0.44, 2.38, 25.9, 0.519, 0.56, 0.58, 0.16, 0.196, 0.082, 1.09, 0.13, 2, 0.106, 0.07, 0.78, 1.9, 0.41, 7.8, 0.42, 1.8, 2.5, 2.787, 1.455, 4.741, 0.83, 1.108, 0.915, 4.862, 0.472, 0.367, 4.085, 0.787, 7.142, 7.41, 0.2, 1.756, 7.41, 0.515, 4.933, 0.913, 0.827, 0.668, 0.489, 0.459, 5.35, 2.279, 0.767, 14.04, 26.24, 1.156, 12.53, 0.46, 0.178, 5.963, 0.05, 0.2, 0.08, 0.07],
    'Fe(2+)': [0.1, 0.02, 0.262, 1.966, 17.89, 0.85, 2.95, 2.1, 0.64, 36.78, 6.28, 8.34, 6.4, 12.31, 10.96, 3.71, 3, 2.268, 13.29, 13.7, 3, 5, 11.1, 3.9, 5.56, 0.548, 1.8, 0.72, 7.7, 2.48, 9.26, 5.89, 11, 1.54, 5.54, 3.3, 16.2, 3.2, 3.63, 17.42, 20.29, 2.23, 8.29, 6.832, 8.23, 6.24, 8.34, 10.58, 2.655, 4.913, 5.534, 0.23, 2.113, 0.438, 6.89, 0.097, 4.829, 2.076, 1.9, 6.9, 14.2, 3.304, 2.862, 0.914, 17.18, 1.722, 0.5, 7.2, 0.023, 0.035, 0.071, 0.114, 0.6, 0.06, 0.256],
    'CO2': [np.nan, np.nan, np.nan, np.nan, 1176, 300, 290, 400, 600, 2593, 3166, 2020, 1898, 2353, 1176, 1058, 1207, 1895, 2473, 2611, 2161, 2151, 2286, 24.1, 35.9, 673, 1064, 708, 2222, 1053, 2530, 2075, 3090, 843, 2020, 726, 2874, 3550, 1336, 2186, 2863, 1058, 2161, 2409, 2203, 0.5, 0.5, 2301, 0.2, 2468, 2343, 0, 1941, 2259, 1024, 983, 0, 1727, 1601, 1936, 1329, 1612, 3551, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
    'ph': [6.8, 6.6, 7.7, 6.9, 6.4, 7.2, 7.3, 7, 7.2, 5.7, 6.7, 6.1, 6, 6.17, 5.33, 5.9, 5.92, 6.13, 6.4, 6.4, 7.14, 7.16, 5.8,6.1, 6.2, 6.24, 6.6, 6.4, 6.2, 6.3, 6.2, 5.9, 7.1, 6.8, 6.3, 7.7, 6.1, 6.4, 6.2, 6.2, 6.2, 6.1, 6.17, 6.03, 6.2, 6.5, 6.44, 6.67, 6.75, 6.16, 6.15, 7.3, 6.35, 6.96, 6.37, 6.64, 6.58, 6.25, 6.25, 6.41, 5.98, 6.83, 6.81, 7.62, 8.55, 7.87, 7.82, 7.44, 7.42, 8, 7.55, 7.1, 7.6, 7.4, 6.9],
    'Eh[mV)': [np.nan, np.nan, np.nan, np.nan, np.nan, 144, 97, 158, 127, 86, 345, 181, 234, 252, 348, 307, 299, 271, 283, 317, 459, 431, 268, 228, 235, 356, 248, 364, 255, 253, 225, 262, 236, 244, 219, 264, 225, 216, np.nan, np.nan, np.nan, 272, np.nan, np.nan, np.nan, 347, 295, 342, 365, np.nan, np.nan, -60, 270, 322, 366, 383, 254, 323, 362, 225, 200, 276, 286, 341, 318, 346, 329, 353, 248, 656, 246, -40, -21, 17, 21],
    't[C]': [11.8, 12.7, 15, 14, 11.8, 12.5, 11.8, 12.9, 10.7, 11.2, 10.8, 11.8, 11.5, 10.9, 12.2, 11.6, 11.2, 11.7, 10.4, 9.4, 9.7, 10.3, 10.4, 10, 9.7, 15, 13.6, 13, 12, 10.5, 10.5, 13.4, 13.2, 10.6, 12.5, 12.1, 11.1, 12.4, 9.2, 8.3, 8.5, 11.8, 10.7, 9.7, 9.9, 14.3, 13.5, 12.7, 13.9, 9.4, 9.2, 9.2, 10.6, 9.2, 11.5, 15.5, 11.9, 13.1, 12, 13.3, 10.9, 16.4, 12.8, 12.8, 13.3, 13.4, 11, 12.5, 7.9, 10, 14.2, 44.3, 25.9, 31, 83],
    'y[mS/cm]': [2.65, 2.65, 7.7, 4.29, 12, 7.8, 7.5, 16.1, 13.9, 2.3, 14.6, 3.4, 2.4, 2.5, 0.337, 0.567, 0.652, 2.33, 3.52, 3.39,19.17, 21.8, 1.5, 2.14, 2.3, 0.653, 1.4, 0.702, 2.9, 1.6, 2.4, 1.3, 3.39, 1.1, 2.4, 0.68, 2.23, 4.8, 1.689, 2.03,2.54, 1.8, 2.4, 2.2, 2.8, 1.223, 1.322, 6.13, 1.205, 3.02, 3.17, 0.71, 4.75, 9.12, 2.56, 8.85, 1.9, 3.48, 2.82, 6.13, 5.98, 16.3, 24.2, 20.1, 27.6, 30.6, 33.6, 37.3, 0.644, 0.475, 5.69, 1.9, 0.5, 0.43, 3.7],
    'Ra 226 [mBq/dm^3]': [4, 3, 80, 172, 758, 192, 149, 575, 361, 29, 106, 56, 32, 130, 16, 6, 9, 37, 140, 216, 485, 437, 15, 31, 30, 6, 24, 12, 31, 12, 4, 45, 57, 22, 123, 7, 32, 55, 113, 22, 56, 21, 65, 65, 117, 22, 15, 24, 96, 243, 228, 2, 14, 282, 24, 223, 32, 111, 82, 98, 157, 441, 300, 246, 243, 34, 384, 638, 21, 17, 169, 480, 686, 23, 522],
    "Ra 228": [41, 54, 58, 139, 784, 362, 171, 877, 391, 38, 135, 75, 60, 60, 23, 10, 10, 65, 106, 205, 736, 393, 41, 74, 60, 18, 36, 21, 74, 40, 12, 65, 71, 58, 45, 15, 46, 97, 66, 10, 10, 69, 120, 97, 171, 31, 21, 25, 73, 353, 417, 10, 15, 167, 36, 151, 29, 130, 89, 47, 57, 340, 182, 207, 190, 376, 292, 616, 26, 15, 130, 187, 401, 10, 395],
    "U 238": [2.2, 2.2, 0.5, 0.5, 0.5, 0.5, 0.23, 0.91, 2.5, 0.5, 0.5, 0.32, 0.08, 47.7, 15.2, 0.5, 0.5, 2.1, 0.9, 0.5, 0.5, 0.5, 0.62, 0.5, 0.5, 2.1, 1.1, 5.9, 0.5, 1.1, 0.76, 0.8, 0.5, 2.9, 0.3, 0.3, 1.3, 0.12, 0.22, 0.47, 0.12, 0.51, 3.1, 0.27, 1.2, 1.9, 1.3, 25, 1.9, 0.11, 1.7, 1.1, 3.9, 3.4, 6.4, 2.4, 1.1, 1.7, 0.9, 1, 4.2, 1.4, 0.5, 0.9, 0.5, 0.8, 0.47, 0.5, 1.8, 0.9, 0.7, 0.4, 1050, 0.2, 205],
    "U 234": [0.91, 6.5, 0.5, 0.5, 0.5, 2.5, 1.04, 9.25, 10.8, 0.5, 0.84, 0.85, 0.34, 55.6, 17, 0.5, 1.4, 2.4, 2.7, 0.5, 0.5, 1.4, 1.2, 0.41, 1.6, 2.8, 4.9, 8.6, 0.5, 3.8, 2.44, 1.3, 0.26, 6.1, 0.84, 1.3, 2.2, 0.65, 0.51, 0.47, 1.46, 2, 5.8, 0.43, 0.47, 2.6, 0.5, 10.5, 1.9, 4.8, 1.4, 2.7, 4.2, 3.7, 7.9, 2.4, 1.95, 1.4, 0.3, 0.97, 8.46, 1.58, 0.5, 0.9, 2.5, 1.5, 6, 0.5, 2.5, 0.6, 1.1, 2.6, 1000, 1.5, 148]
}


data2 = {
    "mineralization": [2223, 2377, 5898, 3072, 7798, 4507, 5701, 11618, 12814, 2169, 8937, 3047, 2596, 2665, 309, 605, 618, 2651, 3869, 3925, 22620, 25372, 1249, 2433, 2251, 616, 1845, 723, 2389, 1202, 2734, 1129, 3206, 895, 2391, 610, 2568, 5136, 1694, 2028, 2539, 1873, 2505, 2242, 2901, 1152, 1240, 6613, 1181, 3281, 3217, 533, 4064, 21878, 2262, 6907, 1675, 3041, 2601, 5460, 5136, 16111, 22366, 13098, 17447, 19724, 21442, 24607, 504, 317, 2705, 1353, 378, 268, 2353],
    "SO4(-2)": [1225, 1285, 0.23, 0.1, 0.54, 10.64, 10.34, 6.17, 5.7, 25.6, 6.83, 29.2, 20.5, 12.33, 46.05, 48.5, 42.4, 1.2, 4.34, 3.79, 33.63, 49.2, 19.5, 21.3, 6.3, 33, 32, 33, 13.8, 30.5, 55, 20.5, 12.3, 23.7, 20.2, 38, 17, 19.25, 0.4, 0.52, 3.25, 19.9, 1.84, 5.07, 0.1, 47.1, 67.9, 4.57, 29.66, 0.5, 0.5, 17.9, 3.33, 4.61, 21.1, 9.11, 23.7, 2.05, 2.6, 12.7, 25.4, 6.51, 5.56, 6.54, 3.93, 3.1, 17.11, 3.27, 56.64, 69.85, 21.09, 696, 16.9, 5.6, 655.3],

    "Cl(-)": [2.5, 24.8, 853, 849, 3111, 1933, 1853, 4712, 2575, 194, 2187, 258, 207, 2, 2.7, 20, 16.7, 1.7, 1.9, 7.1, 628, 968, 5.5, 11.9, 8.4, 25, 13.3, 12.6, 9.1, 7.7, 13.9, 3.7, 7.3, 8.6, 9.5, 12.6, 8.7, 42.6, 2.1, 2.9, 1.2, 14.6, 1.6, 7.2, 11, 14.2, 12.9, 26.1, 9.2, 8.8, 4.7, 46.3, 552, 543, 295, 1380, 190, 360, 243, 1260, 1103, 2986, 5005, 6551, 9697, 10497, 11380, 13463, 41.7, 63.4, 1495, 43.7, 45.9, 1.6, 492.4],

    "HCO3(-)": [352, 380, 3152, 1164, 1686, 839, 1835, 2550, 60.8, 1288, 3356, 1825, 1597, 1962, 46.05, 365, 392, 1943, 2881, 2988, 15921, 17141, 918, 1785, 1662, 399, 1385, 498, 1799, 873, 1974, 828, 0.5, 639, 1758, 401, 1912, 3791, 1253, 1511, 1885, 1399, 1874, 1655, 2162, 798, 853, 4989, 848, 2395, 2349, 320, 2246, 9157, 1244, 3285, 962, 1784, 1595, 2282, 2250, 7713, 9796, 1284, 753, 1323, 1361, 1312, 264, 75, 178, 198, 218, 193, 385],
    "NA(+)": [62.3, 41.35, 1727, 872, 2496, 1585, 1816, 3874, 3999, 417.4, 2333, 516, 489, 70.51, 5.37, 10.53, 10.74, 11.48, 30.4, 304.2, 5074, 6311, 14, 88.8, 47.3, 18.4, 54.5, 16.2, 90, 17.1, 6.1, 49.8, 155, 49.2, 317.8, 40.1, 28, 635, 71.74, 54.2, 133.6, 140, 44.68, 34.48, 133.8, 63.96, 55.64, 760.4, 48.28, 488.9, 464.1, 70.4, 938.5, 6152, 445.8, 1692, 266.4, 362.6, 247.7, 1425, 1282, 4355, 6331, 4778, 6672, 7404, 7877, 9006, 38.59, 77.63, 880.7, 115.9, 29.8, 10.3, 421],
    "Ca(2+)": [430.4, 498.8, 8.94, 70.5, 141.3, 36.1, 46.3, 79.9, 31.9, 111.4, 250, 241, 419, 450.2, 41.29, 108.5, 112.3, 560.7, 728.8, 235.2, 180.1, 174.1, 222, 408, 434, 101.5, 158, 118.8, 331.7, 192.6, 557, 164, 306, 113.6, 152, 54.4, 445, 310, 253.8, 313.5, 301, 177, 445.8, 419.8, 400.8, 139.4, 160.5, 287.9, 160.2, 217.8, 222.3, 57.2, 128, 92.65, 131.8, 179.4, 134.5, 351.4, 355.3, 138.1, 175, 130.8, 93.74, 46.48, 31.71, 49.17, 78.5, 70.65, 70.29, 10.08, 63.47, 215.3, 38.5, 38.2, 224],
    "MG(2+)": [98.4, 92.45, 4.06, 8.66, 21.6, 6.8, 7.4, 20.2, 28, 21.4, 25.9, 46.5, 31.5, 86.8, 13.22, 18.3, 18.43, 41.75, 117.5, 294.5, 473.3, 304.4, 38.6, 71.2, 45.3, 28.6, 173.7, 33.1, 104, 49.1, 66.5, 33.47, 196.4, 37.9, 69.1, 35.7, 116, 275, 63.18, 84.12, 132.9, 87.3, 75.26, 64.95, 115.2, 52.38, 54.45, 443.1, 49.32, 94.44, 102.7, 9.5, 34.81, 223.3, 27.39, 71.64, 24.37, 59.82, 55.88, 25.73, 29.56, 215.1, 380.3, 23.26, 27, 33.63, 40.97, 38.57, 14.92, 5.18, 20.74, 38.2, 22.4, 12.3, 45.4],
    'K(+)': [10.98, 9.8, 18.02, 15.47, 48.53, 13.1, 18.6, 32.6, 22.9, 13.8, 104, 17.4, 14.9, 12.8, 1.28, 1.51, 1.29, 2.72, 4.22, 10.8, 233.2, 337.2, 3, 8, 4.23, 1.5, 7.9, 3.36, 9.8, 2.9, 2.4, 8.23, 18.4, 2.5, 20.4, 3.5, 2.8, 24.6, 5.29, 6.22, 6.73, 3.81, 10.07, 8.63, 10.77, 13.15, 10.92, 47.15, 7.22, 16.66, 14.51, 0.91, 31.46, 110, 16.91, 50.1, 11.47, 12.78, 11.54, 89.25, 79.24, 187, 23.95, 52.31, 25.88, 27.71, 99.72, 61.68, 2.28, 1.44, 9.25, 16.1, 4.7, 1.7, 53.7],
    'Ba(2+)': [0.022, 0.025, 2.53, 3.348, 16.83, 2.87, 4.085, 16.8, 5.4, 0.38, 3.2, 0.58, 0.3, 0.591, 0.145, 0.177, 0.196, 0.44, 2.38, 25.9, 0.519, 0.56, 0.58, 0.16, 0.196, 0.082, 1.09, 0.13, 2, 0.106, 0.07, 0.78, 1.9, 0.41, 7.8, 0.42, 1.8, 2.5, 2.787, 1.455, 4.741, 0.83, 1.108, 0.915, 4.862, 0.472, 0.367, 4.085, 0.787, 7.142, 7.41, 0.2, 1.756, 7.41, 0.515, 4.933, 0.913, 0.827, 0.668, 0.489, 0.459, 5.35, 2.279, 0.767, 14.04, 26.24, 1.156, 12.53, 0.46, 0.178, 5.963, 0.05, 0.2, 0.08, 0.07],
    'Fe(2+)': [0.1, 0.02, 0.262, 1.966, 17.89, 0.85, 2.95, 2.1, 0.64, 36.78, 6.28, 8.34, 6.4, 12.31, 10.96, 3.71, 3, 2.268, 13.29, 13.7, 3, 5, 11.1, 3.9, 5.56, 0.548, 1.8, 0.72, 7.7, 2.48, 9.26, 5.89, 11, 1.54, 5.54, 3.3, 16.2, 3.2, 3.63, 17.42, 20.29, 2.23, 8.29, 6.832, 8.23, 6.24, 8.34, 10.58, 2.655, 4.913, 5.534, 0.23, 2.113, 0.438, 6.89, 0.097, 4.829, 2.076, 1.9, 6.9, 14.2, 3.304, 2.862, 0.914, 17.18, 1.722, 0.5, 7.2, 0.023, 0.035, 0.071, 0.114, 0.6, 0.06, 0.256],
    'CO2': [2045, 2878, 833, 903, 1176, 300, 290, 400, 600, 2593, 3166, 2020, 1898, 2353, 1176, 1058, 1207, 1895, 2473, 2611, 2161, 2151, 2286, 24.1, 35.9, 673, 1064, 708, 2222, 1053, 2530, 2075, 3090, 843, 2020, 726, 2874, 3550, 1336, 2186, 2863, 1058, 2161, 2409, 2203, 0.5, 0.5, 2301, 0.2, 2468, 2343, 0, 1941, 2259, 1024, 983, 0, 1727, 1601, 1936, 1329, 1612, 3551, 1490, 632, 196, 324, 213, 460, 321 , 874, 453, 298, 543, 673],
    'ph': [6.8, 6.6, 7.7, 6.9, 6.4, 7.2, 7.3, 7, 7.2, 5.7, 6.7, 6.1, 6, 6.17, 5.33, 5.9, 5.92, 6.13, 6.4, 6.4, 7.14, 7.16, 5.8,6.1, 6.2, 6.24, 6.6, 6.4, 6.2, 6.3, 6.2, 5.9, 7.1, 6.8, 6.3, 7.7, 6.1, 6.4, 6.2, 6.2, 6.2, 6.1, 6.17, 6.03, 6.2, 6.5, 6.44, 6.67, 6.75, 6.16, 6.15, 7.3, 6.35, 6.96, 6.37, 6.64, 6.58, 6.25, 6.25, 6.41, 5.98, 6.83, 6.81, 7.62, 8.55, 7.87, 7.82, 7.44, 7.42, 8, 7.55, 7.1, 7.6, 7.4, 6.9],
    'Eh[mV)': [78, 56, 61, 112, 89, 144, 97, 158, 127, 86, 345, 181, 234, 252, 348, 307, 299, 271, 283, 317, 459, 431, 268, 228, 235, 356, 248, 364, 255, 253, 225, 262, 236, 244, 219, 264, 225, 216, 174, 258, 210, 272, 185, 167, 388, 347, 295, 342, 365, 137, 160, -60, 270, 322, 366, 383, 254, 323, 362, 225, 200, 276, 286, 341, 318, 346, 329, 353, 248, 656, 246, -40, -21, 17, 21],
    't[C]': [11.8, 12.7, 15, 14, 11.8, 12.5, 11.8, 12.9, 10.7, 11.2, 10.8, 11.8, 11.5, 10.9, 12.2, 11.6, 11.2, 11.7, 10.4, 9.4, 9.7, 10.3, 10.4, 10, 9.7, 15, 13.6, 13, 12, 10.5, 10.5, 13.4, 13.2, 10.6, 12.5, 12.1, 11.1, 12.4, 9.2, 8.3, 8.5, 11.8, 10.7, 9.7, 9.9, 14.3, 13.5, 12.7, 13.9, 9.4, 9.2, 9.2, 10.6, 9.2, 11.5, 15.5, 11.9, 13.1, 12, 13.3, 10.9, 16.4, 12.8, 12.8, 13.3, 13.4, 11, 12.5, 7.9, 10, 14.2, 44.3, 25.9, 31, 83],
    'y[mS/cm]': [2.65, 2.65, 7.7, 4.29, 12, 7.8, 7.5, 16.1, 13.9, 2.3, 14.6, 3.4, 2.4, 2.5, 0.337, 0.567, 0.652, 2.33, 3.52, 3.39,19.17, 21.8, 1.5, 2.14, 2.3, 0.653, 1.4, 0.702, 2.9, 1.6, 2.4, 1.3, 3.39, 1.1, 2.4, 0.68, 2.23, 4.8, 1.689, 2.03,2.54, 1.8, 2.4, 2.2, 2.8, 1.223, 1.322, 6.13, 1.205, 3.02, 3.17, 0.71, 4.75, 9.12, 2.56, 8.85, 1.9, 3.48, 2.82, 6.13, 5.98, 16.3, 24.2, 20.1, 27.6, 30.6, 33.6, 37.3, 0.644, 0.475, 5.69, 1.9, 0.5, 0.43, 3.7],
    'Ra 226 [mBq/dm^3]': [4, 3, 80, 172, 758, 192, 149, 575, 361, 29, 106, 56, 32, 130, 16, 6, 9, 37, 140, 216, 485, 437, 15, 31, 30, 6, 24, 12, 31, 12, 4, 45, 57, 22, 123, 7, 32, 55, 113, 22, 56, 21, 65, 65, 117, 22, 15, 24, 96, 243, 228, 2, 14, 282, 24, 223, 32, 111, 82, 98, 157, 441, 300, 246, 243, 34, 384, 638, 21, 17, 169, 480, 686, 23, 522],
    "Ra 228": [41, 54, 58, 139, 784, 362, 171, 877, 391, 38, 135, 75, 60, 60, 23, 10, 10, 65, 106, 205, 736, 393, 41, 74, 60, 18, 36, 21, 74, 40, 12, 65, 71, 58, 45, 15, 46, 97, 66, 10, 10, 69, 120, 97, 171, 31, 21, 25, 73, 353, 417, 10, 15, 167, 36, 151, 29, 130, 89, 47, 57, 340, 182, 207, 190, 376, 292, 616, 26, 15, 130, 187, 401, 10, 395],
    "U 238": [2.2, 2.2, 0.5, 0.5, 0.5, 0.5, 0.23, 0.91, 2.5, 0.5, 0.5, 0.32, 0.08, 47.7, 15.2, 0.5, 0.5, 2.1, 0.9, 0.5, 0.5, 0.5, 0.62, 0.5, 0.5, 2.1, 1.1, 5.9, 0.5, 1.1, 0.76, 0.8, 0.5, 2.9, 0.3, 0.3, 1.3, 0.12, 0.22, 0.47, 0.12, 0.51, 3.1, 0.27, 1.2, 1.9, 1.3, 25, 1.9, 0.11, 1.7, 1.1, 3.9, 3.4, 6.4, 2.4, 1.1, 1.7, 0.9, 1, 4.2, 1.4, 0.5, 0.9, 0.5, 0.8, 0.47, 0.5, 1.8, 0.9, 0.7, 0.4, 1050, 0.2, 205],
    "U 234": [0.91, 6.5, 0.5, 0.5, 0.5, 2.5, 1.04, 9.25, 10.8, 0.5, 0.84, 0.85, 0.34, 55.6, 17, 0.5, 1.4, 2.4, 2.7, 0.5, 0.5, 1.4, 1.2, 0.41, 1.6, 2.8, 4.9, 8.6, 0.5, 3.8, 2.44, 1.3, 0.26, 6.1, 0.84, 1.3, 2.2, 0.65, 0.51, 0.47, 1.46, 2, 5.8, 0.43, 0.47, 2.6, 0.5, 10.5, 1.9, 4.8, 1.4, 2.7, 4.2, 3.7, 7.9, 2.4, 1.95, 1.4, 0.3, 0.97, 8.46, 1.58, 0.5, 0.9, 2.5, 1.5, 6, 0.5, 2.5, 0.6, 1.1, 2.6, 1000, 1.5, 148]
}


def get_data_as_df():
    """
    Returns the data for the first dataset.
    """
    return  pd.DataFrame(data).dropna()

def get_data_without_columns_with_nan_as_df():
    """
    Returns the data for the first dataset without columns that contain NaN values.
    """
    df = pd.DataFrame(data)
    return df.drop(['CO2', 'Eh[mV)'], axis=1)


def get_data_with_human_added_values_as_df():
    """
    Returns the data for the first dataset.
    """

    return  pd.DataFrame(data2)

def get_data_with_additional_columns_as_df():
    """
    Returns the data for the second dataset with additional columns.
    """
    df = pd.DataFrame(data).dropna()
    df['mineralization_per_SO4'] = df['mineralization'] / df['SO4(-2)']
    df['mineralization_per_Cl'] = df['mineralization'] / df['Cl(-)']
    return df

def get_synthetic_data_based_on_similarity_to_real_points(df):

  df_lower_than_2 = df[(df['U 234'] < 3) & (df['U 238'] < 3)].copy()
  df_rest = df[~((df['U 234'] < 3) & (df['U 238'] < 3))].copy()

  # Number of artificial samples for each group
  num_artificial_samples_lower = 10
  num_artificial_samples_rest = 200

  # Noise percentage
  noise_percentage = 0.05

  artificial_dfs_lower = []
  artificial_dfs_rest = []

  # Generate artificial data for the 'lower than 2' group
  for index, row in df_lower_than_2.iterrows():
      original_data = row.values
      base_artificial_data = np.tile(original_data, (num_artificial_samples_lower, 1))
      noise_magnitude = np.abs(original_data) * noise_percentage
      noise = np.random.randn(num_artificial_samples_lower, len(original_data)) * noise_magnitude
      artificial_data = base_artificial_data + noise
      artificial_df = pd.DataFrame(artificial_data, columns=df_lower_than_2.columns)
      artificial_dfs_lower.append(artificial_df)

  # Generate artificial data for the 'rest' group
  for index, row in df_rest.iterrows():
      original_data = row.values
      base_artificial_data = np.tile(original_data, (num_artificial_samples_rest, 1))
      noise_magnitude = np.abs(original_data) * noise_percentage
      noise = np.random.randn(num_artificial_samples_rest, len(original_data)) * noise_magnitude
      artificial_data = base_artificial_data + noise
      artificial_df = pd.DataFrame(artificial_data, columns=df_rest.columns)
      artificial_dfs_rest.append(artificial_df)

  # Concatenate the artificial dataframes
  synthetic_df_lower = pd.concat(artificial_dfs_lower, ignore_index=True)
  synthetic_df_rest = pd.concat(artificial_dfs_rest, ignore_index=True)

  # Combine the synthetic dataframes into one
  synthetic_df2 = pd.concat([synthetic_df_lower, synthetic_df_rest], ignore_index=True)
  return synthetic_df2


def get_gamma_data(df):
  new_data = {}
  for col in df.columns:


    mean = df[col].mean()
    variance = df[col].var()
    if variance <= 0:
         print(f"Warning: Column '{col}' has zero or negative variance. Cannot fit Gamma distribution.")
         return pd.DataFrame() # Return empty dataframe
    shape = (mean**2) / variance
    scale = variance / mean


    new_data[col] = gamma.rvs(shape, scale=scale, size=len(df))

  return pd.DataFrame(new_data)



def get_halfnormal_data(df,size=1000):
  new_data = {}
  for col in df.columns:
    # Fit half-normal distribution to the data
    # The location and scale parameters are the mean and standard deviation of the underlying normal distribution
    # We'll use the mean of the data as the scale parameter for the half-normal.
    # Location is typically 0 for a standard half-normal, but we can use the minimum value
    # of the data as a starting point if it's not 0 or negative.
    loc, scale = halfnorm.fit(df[col]) # Assuming data is non-negative

    # Generate new data from the fitted half-normal distribution
    new_data[col] = halfnorm.rvs(loc=loc, scale=scale, size=size)

  return pd.DataFrame(new_data)


def get_uniform_data(df,size=1000):
    new_data = {}
    for col in df.columns:
        # Fit uniform distribution to the data
        min_val = df[col].min()
        max_val = df[col].max()

        # Generate new data from the fitted uniform distribution
        new_data[col] = np.random.uniform(min_val, max_val, size=size)

    return pd.DataFrame(new_data)

def get_data_from_kernel_density_estimation(df):
    np_array = df.to_numpy()
    kde = KernelDensity(kernel='gaussian', bandwidth=0.5)
    kde.fit(np_array)


    new_samples = kde.sample(1000)

    new_df = pd.DataFrame(new_samples, columns=df.columns)
    return new_df

def get_data_from_normal_distribution(df,size=1000):
    new_data = {}
    for col in df.columns:
        mean = df[col].mean()
        std_dev = df[col].std()

        # Generate new data from the normal distribution
        new_data[col] = np.random.normal(loc=mean, scale=std_dev, size=size)

    return pd.DataFrame(new_data)


def get_half_synthetic_data_based_on_similarity_to_real_points(df):


  df = df.sample(frac=0.5, random_state=42).reset_index(drop=True)

  df_lower_than_2 = df[(df['U 234'] < 3) & (df['U 238'] < 3)].copy()
  df_rest = df[~((df['U 234'] < 3) & (df['U 238'] < 3))].copy()

  num_artificial_samples_lower = 10
  num_artificial_samples_rest = 200
  noise_percentage = 0.05

  artificial_dfs_lower = []
  artificial_dfs_rest = []

  for index, row in df_lower_than_2.iterrows():
    original_data = row.values
    base_artificial_data = np.tile(original_data, (num_artificial_samples_lower, 1))
    noise_magnitude = np.abs(original_data) * noise_percentage
    noise = np.random.randn(num_artificial_samples_lower, len(original_data)) * noise_magnitude
    artificial_data = base_artificial_data + noise
    artificial_df = pd.DataFrame(artificial_data, columns=df_lower_than_2.columns)
    artificial_dfs_lower.append(artificial_df)

  for index, row in df_rest.iterrows():
    original_data = row.values
    base_artificial_data = np.tile(original_data, (num_artificial_samples_rest, 1))
    noise_magnitude = np.abs(original_data) * noise_percentage
    noise = np.random.randn(num_artificial_samples_rest, len(original_data)) * noise_magnitude
    artificial_data = base_artificial_data + noise
    artificial_df = pd.DataFrame(artificial_data, columns=df_rest.columns)
    artificial_dfs_rest.append(artificial_df)

  synthetic_df_lower = pd.concat(artificial_dfs_lower, ignore_index=True)
  synthetic_df_rest = pd.concat(artificial_dfs_rest, ignore_index=True)
  synthetic_df2 = pd.concat([synthetic_df_lower, synthetic_df_rest], ignore_index=True)
  return synthetic_df2\
  
def get_data_from_csv_file(file_path):
  return pd.read_csv(file_path)